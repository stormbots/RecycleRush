// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush.commands;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**ONLY ONE TOTE:
 * assume the hook is at the correct position, open claw intake, rollers on, Close intake, pull tote until switch is true,
 * lift tote with the hook up distance of one tote
 *MULTIPULE TOTES:
 *(assume the hook is in the correct position)open claw intake, rollers on, close intake, pull tote on until switch for have/no have tote is true,
 *lower tote on the one that you just got, lower more to pick up bottom tote, intake until limit switch is true, lift tote up distance one(tote)
 */
public class ToteStack extends CommandGroup {
    
    public  ToteStack() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.
    	addSequential (new RollersInUntil(6)); //TODO tune this value
    	addSequential (new ToteSet(0));
    	addSequential (new RollersInUntil());
    	addSequential (new ToteSet(1));
        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	//TODO make command to find distance to tote in front of us
    	/*Process
    	check for tote in front
    		quit if no tote
		turn on rollers
    	drive to tote
    		stop when sensor is hit
		--steps when already holding a tote
			bring stack down
			check for switch again
		--end one tote steps
    	lift stack
    	turn rollers off
    	*/
    	
    	
    	/*
    	if (tote in front of us?)
    	{
    		addSequential(rollers on);
    		while(!switch)
    		{
    			addSequential(new drive forwards);
    		}
    		if (number of totes => 1)
    		{
    			addSequential(new ToteSet(0));
    		}
    		while(!switch)
    		{
    			addSequential(new drive forwards);
    		}
    		addSequential(new ToteSet(++number of totes));
    		addSequential(rollers off);
    	}
    	*/
    	
    }
}
