package org.usfirst.frc2811.RecycleRush.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2811.RecycleRush.Robot;


/**
 * DEPRECIATED. For manual control, use BidentDownManual
 */
public class  ToteUp extends Command {
	public double TOTE = 12;
	public double GAP = 2;
	public double GRAB = 12;
	public double GAPPOSITIONONE = TOTE + GAP;
	public double GAPPOSITIONTWO = 2*TOTE + GAP;
	public double GAPPOSITIONTHREE = 3*TOTE + GAP;
	public double GAPPOSITIONFOUR = 4*TOTE + GAP;
	public double GAPPOSITIONFIVE = 5*TOTE + GAP;
	public double GAPPOSITIONSIX = 6*TOTE + GAP;
	
    public ToteUp() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	if(Robot.toteElevator.get()>GAPPOSITIONSIX){
    		Robot.toteElevator.set(GAPPOSITIONSIX);
    	}
    	if(Robot.toteElevator.get() >= GAPPOSITIONFIVE&& Robot.toteElevator.get()<GAPPOSITIONSIX){
    		Robot.toteElevator.set(GAPPOSITIONSIX);
    	}
    	if(Robot.toteElevator.get() >= GAPPOSITIONFOUR&& Robot.toteElevator.get()<GAPPOSITIONFIVE){
    		Robot.toteElevator.set(GAPPOSITIONFIVE);
    	}
    	if(Robot.toteElevator.get() >= GAPPOSITIONTHREE&& Robot.toteElevator.get()<GAPPOSITIONFOUR){
    		Robot.toteElevator.set(GAPPOSITIONFOUR);
    	}
    	if(Robot.toteElevator.get() >= GAPPOSITIONTWO&& Robot.toteElevator.get()<GAPPOSITIONTHREE){
    		Robot.toteElevator.set(GAPPOSITIONTHREE);
    	}
    	if(Robot.toteElevator.get() >= GAPPOSITIONONE&& Robot.toteElevator.get()<GAPPOSITIONTWO){
    		Robot.toteElevator.set(GAPPOSITIONTWO);
    	}
    	if(Robot.toteElevator.get()<GAPPOSITIONONE){
    		Robot.toteElevator.set(TOTE+GRAB);
    	}
    	else{
    		System.out.println("ERROR IN BIDENT UP");
    	}
    	
    }

   
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}