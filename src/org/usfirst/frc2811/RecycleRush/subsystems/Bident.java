// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush.subsystems;

import org.usfirst.frc2811.RecycleRush.Robot;
import org.usfirst.frc2811.RecycleRush.RobotMap;
import org.usfirst.frc2811.RecycleRush.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANJaguar.ControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.CANTalon;


/**
 *
 */
public class Bident extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon bidentMotor = RobotMap.bidentMotor;
    Solenoid binSolenoid = RobotMap.bidentSolenoid;
    Ultrasonic binSonarTop = RobotMap.bidentSonarIntake;
    Ultrasonic binSonarBottom = RobotMap.bidentSonarBumper;
    //TODO remove the ultrasonic sensors because they are declared in the code
    //FIXME public Ultrasonic binRangeTop = new Ultrasonic(0,1);
    //FIXME public Ultrasonic binRangeBottom = new Ultrasonic(2,3);
    public boolean open = true;
    public boolean close = !open;
	private double setpoint;
    public int TOTEHEIGHTUP = 100;
    public int TOTEHEIGHTDOWN = 102;
    //TODO fix port declaration binRangerTop and Bottom, port are for one wires and need to be two
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	bidentMotor.changeControlMode(CANTalon.ControlMode.Position);
    	double p = 1;
    	double i = 0;
    	double d = 0;
    	double f = 0;
    	int izone = 0; 
    	double ramprate = 36;// who knows what this will do
    	int profile = 0; 
    	bidentMotor.setPID(p,i,d,f,izone,ramprate,profile);
    	//binSonarBottom.setAutomaticMode(true);
    	
        // Set the default command for a subsystem here.
        setDefaultCommand(new BidentPIDUpdate());
    }
        
    

    public void init (){
    	
    }
    public void Update(){
    	bidentMotor.set(setpoint);
    }
    public double BidentSpeed(){
    	double speed = bidentMotor.getSpeed(); // gives speed  in the sensor's native ticks per 100ms
      	return speed;
    }

    
    public void Down(){
    	setpoint = bidentMotor.getPosition()-50;//TODO tune this
    	bidentMotor.set(setpoint);
    }
    
    public void Up(){
    	setpoint = bidentMotor.getPosition()+50;//TODO tune this
    	bidentMotor.set(setpoint);
    }
    
    
    public double get(){
    	//return current bident height in inches
    	 double output = Map(bidentMotor.getPosition(),800,-700,78,0);
    	 return output;
    }
    
    public int getTotes(){
    	//return current bident height in totes
    	//TODO return bident height in totes
    	return 1;
    }
    
    public double set(double inches){
    	//needs to set the target for the pid controller on the srx
    	//expects inches
    	setpoint = Map(inches,78,0,800,-700); 
    	//TODO do a motor write
    	return setpoint;
    } 
    
    public double setTotes(int totes){
    	//TODO make this go a number of totes
    	return 2.5;
    }

    public double getDistanceTop(){
    //	binSonarTop.setEnabled(true);
    	//FIXME Does not return correctly. Returns void, kills robot
    	//return binSonarTop.getRangeInches();
    	return 0;
    }
    
    public double getDistanceBumper(){
    //	binSonarBottom.setEnabled(true);
    	//TODO calibrate range maybe...(limits)
    	//binSonarBottom.ping();
    	return 0;
    }
    
    public void bidentOpen(){
    	binSolenoid.set(open);
    }
    
    public void bidentClose(){
    	binSolenoid.set(close);
    }
    public boolean onTarget(){
    	//find out where we are
    	//find out where we want to go
    	//find the absolute value of the difference
    	// if it is less than 50, return true 
    	// of it is greater than 50, return false
    	
    //replaced with last setpoint, now saved in sybsystem
    //double setpoint = bidentMotor.getSetpoint();
    double position =bidentMotor.getPosition();
    double difference = Math.abs(setpoint - position);
    System.out.println(difference);
   if (difference<=50){
    	return true;
   }
   else {
	   return false;
   }

    }




private double Map( double input, double maximum, double minimum, double outputMax, double outputMin){
	double output = (input/(maximum-minimum)-minimum/(maximum-minimum))*(outputMax-outputMin)+outputMin;
	return output; 
	}
}
           
    	
    
	
	
		
	
    
    


