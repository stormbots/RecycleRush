// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush.subsystems;

import org.usfirst.frc2811.RecycleRush.RobotMap;
import org.usfirst.frc2811.RecycleRush.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANJaguar.ControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Bident extends TalonSRXPIDBase {
    
	private Solenoid binSolenoid;
    //TODO remove the ultrasonic sensors because they are declared in the code
    //FIXME public Ultrasonic binRangeTop = new Ultrasonic(0,1);
    //FIXME public Ultrasonic binRangeBottom = new Ultrasonic(2,3);
    public boolean open = true;
    public boolean close = !open;
    
    private double setpoint;
    //TODO fix port declaration binRangerTop and Bottom, port are for one wires and need to be two
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {

    	//Initialization stuff
    	useMotor( new CANTalon(5) );
    	binSolenoid=new Solenoid(1);
    	
    	
        INCHES_FWD=72;
        INCHES_REV=0;
        INCHES_INDEX=30; //index is on the lowest switch
        
        //Set up the PID function
    	init();
    	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void init (){
    	motor.changeControlMode(CANTalon.ControlMode.Position);
    	motor.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);//  changeFeedbackDevice(CANTalon.ControlMode.Position);
    	setpoint=motor.getPosition();
    	double p = 2;
    	double i = 0.01;
    	double d = 0;
    	double f = 0;
    	int izone = 0; 
    	double ramprate = 0;// who knows what this will do
    	int profile = 0; 
    	motor.setPID(p,i,d,f,izone,ramprate,profile);
    }
        
    public double getDistanceTop(){
    	//FIXME Does not return correctly. Returns void, kills robot
    	//return binSonarTop.getRangeInches();
    	return 0;
    }
    
    public double getDistanceBumper(){
    	//TODO calibrate range maybe...(limits)
    	int distance=0;
    	//binSonarBottom.ping();
    	return 0;
    }
    
    public void Open(){
    	binSolenoid.set(open);
    }
    
    public void Close(){
    	binSolenoid.set(close);
    }    
    
}

