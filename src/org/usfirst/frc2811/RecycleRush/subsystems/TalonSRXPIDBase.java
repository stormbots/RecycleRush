// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush.subsystems;

import org.usfirst.frc2811.RecycleRush.Robot;
import org.usfirst.frc2811.RecycleRush.RobotMap;
import org.usfirst.frc2811.RecycleRush.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANJaguar.ControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.CANTalon;


/**
 *  This contains the common functions for the two Lifer systems. 
 *  /For individual declarations, extend this class
 *  //NOTE
 */
public class TalonSRXPIDBase extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    protected CANTalon motor;
        
    protected double setpoint;
    
    //Will be used internally, but can be overridden in the inherited class
    //These are not static since they will change once when the function is homed after initialization
    
    protected static double ENCODER_TICKS_FWD;
    protected static double ENCODER_TICKS_REV;
    protected static double ENCODER_TICKS_INDEX;
    protected static double ENCODER_TICKS_HEIGHT; 

    //For the mapping functions, these will be used to convert to inches
    //Using 0/100 is consistent for %, so let's use that as a default
    protected double INCHES_FWD=100;
    protected double INCHES_REV=0;
    protected double INCHES_INDEX=INCHES_REV;
    
    //This should be in inches
    protected double VIRTUAL_STOP_FWD=INCHES_FWD;
    protected double VIRTUAL_STOP_REV=INCHES_REV;
    
    //Constants for the Set function to indicate go up or down one tote
    public final static double GO_ONE_TOTE_UP=100;
    public final static double GO_ONE_TOTE_DOWN=-1;

    protected boolean isHomed = false;
    
    /**
     * Set the height of the system in inches
     * This is used for internal mapping to provide accurate results
     * @param fwd
     * @param rev
     */
    public void setRangeInInches(double fwd,double rev){
    	INCHES_FWD=fwd;
    	INCHES_REV=rev;
    }
    
    /**
     * Set the height of the system in encoder ticks. 
     * This should be consistent barring hardware changes
     * @param ticks
     */
    public void setHeightInTicks(double ticks){
    	ENCODER_TICKS_HEIGHT=ticks;
    }
    public void setVirtualStops(double fwd,double rev,double index){
    	VIRTUAL_STOP_FWD=fwd;
    	VIRTUAL_STOP_REV=rev;
    	}
    
    protected void useMotor(CANTalon newmotor){
    	motor=newmotor;
    }
    public void Home(){
    	Down(); // Additional check for switch
    	if (motor.isRevLimitSwitchClosed()){
    		isHomed = true ;
    	    ENCODER_TICKS_REV=motor.getEncPosition();
    	    ENCODER_TICKS_FWD=ENCODER_TICKS_REV+ENCODER_TICKS_HEIGHT;
    	}
    }
    
    public void  printStatus(){
    	System.out.println("Forward Limits: "+INCHES_FWD+ "\t (ticks: "+ENCODER_TICKS_FWD+")");
    	System.out.println("Rev Limits    : "+INCHES_FWD+ "\t (ticks: "+ENCODER_TICKS_REV+")");
    	System.out.println("Current State : "+get()+ "\t (ticks: "+ getRawEncoder() );
    	System.out.println("Homing Status : " +isHomed);

    }

    public boolean isHomed(){
    	return isHomed; //TODO: Make the return function meaningful
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	// Override this with your own code in the extended class

    	//To avoid random compiler issues, just write out to a dummy talon.
    	//Since address 0 is the PDP, this should not cause issues
    	motor=new CANTalon(0);
    	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
        
    public double Speed(){
    	double speed = motor.getSpeed(); // gives speed  in the sensor's native ticks per 100ms
      	return speed;
    }

    public void Down(){
    	if(motor.isFwdLimitSwitchClosed() ){
    		motor.ClearIaccum();
    	}
    	if(motor.isRevLimitSwitchClosed() ){
    		stop();
    	} else {
    		setpoint = motor.getPosition()-55;//TODO tune this
    		motor.set(setpoint);
    	}
    }
    
    public void Up(){
    	//prevent I hangups when coming off of a switch
    	if(motor.isRevLimitSwitchClosed() ){
        	motor.ClearIaccum();
    	}
    	
    	//prevent I buildup when hitting a switch
    	if(motor.isFwdLimitSwitchClosed() ){
    		stop();
    	} else {
    	setpoint = motor.getPosition()+55;//TODO tune this
    	motor.set(setpoint);
    	}
    }
    public void stop(){
    	setpoint=motor.getPosition();
    	motor.ClearIaccum();
    }    
    
    public double get(){
    	//return current bident height in inches
    	double output;
    	output=motor.getPosition();
    	output = Map(output,ENCODER_TICKS_FWD,ENCODER_TICKS_REV,INCHES_FWD,INCHES_REV);
    	return output;
    }
        
    public double set(double inches){
    	//needs to set the target for the pid controller on the srx
    	//expects inches
    	setpoint=inches;
    	setpoint= Map(setpoint,INCHES_FWD,INCHES_REV,ENCODER_TICKS_FWD,ENCODER_TICKS_REV); //TODO do a motor write
    	motor.set(setpoint);
    	return setpoint;
    } 
    public boolean onTarget(){
    	//find out where we are
    	//find out where we want to go
    	//find the absolute value of the difference
    	// if it is less than 50, return true 
    	// of it is greater than 50, return false
	    double position =motor.getPosition();
	    double difference = Math.abs(setpoint - position);
	
	    //FIXME Don't need print spam unless debugging
	    //System.out.println("S: "+setpoint+" P: "+position+ "D:"+difference +" S?" +isIndexSwitchPressed());
		if (difference<=50){
			return true;
			}
			else {
				return false;
			}
    }

    public int getTotes(){
    	//return current bident height in totes
    	//TODO return bident height in totes
    	return 1;
    }
    
    public void setTotes(double toteheight){
    	//Set the pid to a specific height in totes
    	//TODO set tote height
    }

    public boolean isIndexSwitchPressed(){
    	//Switch is normally high (1), and low(0) when closed
    	return motor.getPinStateQuadIdx()==1?false:true;
    }

    public double getRawEncoder(){
    	return motor.getEncPosition() ;
    	
    }

protected double Map( double input, double maximum, double minimum, double outputMax, double outputMin){
	double output = (input/(maximum-minimum)-minimum/(maximum-minimum))*(outputMax-outputMin)+outputMin;
	return output; 
	//NO ONE EXPECTS THE SPANISH INQUISITION
	}
}
           
    	
    
	
	
		
	
    
    


