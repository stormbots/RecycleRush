// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisFrontLeftDrive;
    public static SpeedController chassisFrontRightDrive;
    public static SpeedController chassisBackLeftDrive;
    public static SpeedController chassisBackRightDrive;
    public static RobotDrive chassisRobotDrive41;
    public static Gyro chassisRotationGyro;
    public static SpeedController toteIntakeToteRollerL;
    public static SpeedController toteIntakeToteRollerR;
    public static Solenoid toteIntakeToteSolenoidL;
    public static Solenoid toteIntakeToteSolenoidR;
    public static SpeedController toteElevatorToteLifterMotor;
    public static DigitalInput toteElevatorToteSwitch;
    public static AnalogInput toteElevatorToteSonar;
    public static SpeedController bidentBinLifterMotor;
    public static Solenoid bidentBinSolenoid;
    public static AnalogInput bidentBinSonarTop;
    public static AnalogInput bidentBinSonarBottom;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisFrontLeftDrive = new Talon(1);
        LiveWindow.addActuator("Chassis", "FrontLeftDrive", (Talon) chassisFrontLeftDrive);
        
        chassisFrontRightDrive = new Talon(2);
        LiveWindow.addActuator("Chassis", "FrontRightDrive", (Talon) chassisFrontRightDrive);
        
        chassisBackLeftDrive = new Talon(3);
        LiveWindow.addActuator("Chassis", "BackLeftDrive", (Talon) chassisBackLeftDrive);
        
        chassisBackRightDrive = new Talon(4);
        LiveWindow.addActuator("Chassis", "BackRightDrive", (Talon) chassisBackRightDrive);
        
        chassisRobotDrive41 = new RobotDrive(chassisFrontLeftDrive, chassisBackLeftDrive,
              chassisFrontRightDrive, chassisBackRightDrive);
        
        chassisRobotDrive41.setSafetyEnabled(true);
        chassisRobotDrive41.setExpiration(0.1);
        chassisRobotDrive41.setSensitivity(0.5);
        chassisRobotDrive41.setMaxOutput(1.0);

        chassisRotationGyro = new Gyro(0);
        LiveWindow.addSensor("Chassis", "RotationGyro", chassisRotationGyro);
        chassisRotationGyro.setSensitivity(0.007);
        toteIntakeToteRollerL = new Talon(5);
        LiveWindow.addActuator("ToteIntake", "ToteRollerL", (Talon) toteIntakeToteRollerL);
        
        toteIntakeToteRollerR = new Talon(6);
        LiveWindow.addActuator("ToteIntake", "ToteRollerR", (Talon) toteIntakeToteRollerR);
        
        toteIntakeToteSolenoidL = new Solenoid(0, 0);
        LiveWindow.addActuator("ToteIntake", "ToteSolenoidL", toteIntakeToteSolenoidL);
        
        toteIntakeToteSolenoidR = new Solenoid(0, 1);
        LiveWindow.addActuator("ToteIntake", "ToteSolenoidR", toteIntakeToteSolenoidR);
        
        toteElevatorToteLifterMotor = new Talon(7);
        LiveWindow.addActuator("ToteElevator", "ToteLifterMotor", (Talon) toteElevatorToteLifterMotor);
        
        toteElevatorToteSwitch = new DigitalInput(2);
        LiveWindow.addSensor("ToteElevator", "ToteSwitch", toteElevatorToteSwitch);
        
        toteElevatorToteSonar = new AnalogInput(1);
        LiveWindow.addSensor("ToteElevator", "ToteSonar", toteElevatorToteSonar);
        
        bidentBinLifterMotor = new TalonSRX(8);
        LiveWindow.addActuator("Bident", "BinLifterMotor", (TalonSRX) bidentBinLifterMotor);
        
        bidentBinSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("Bident", "BinSolenoid", bidentBinSolenoid);
        
        bidentBinSonarTop = new AnalogInput(2);
        LiveWindow.addSensor("Bident", "BinSonarTop", bidentBinSonarTop);
        
        bidentBinSonarBottom = new AnalogInput(3);
        LiveWindow.addSensor("Bident", "BinSonarBottom", bidentBinSonarBottom);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
