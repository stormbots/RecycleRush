// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2811.RecycleRush.commands.*;
import org.usfirst.frc2811.RecycleRush.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command joystickDrive;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static ToteIntake toteIntake;
    public static ToteElevator toteElevator;
    public static Bident bident;
    public static Map map;
    public static Lights lights;
    public static UnderGlow underGlow;
    public static DriverStation lcd;
    public static Logger logger;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        toteIntake = new ToteIntake();
        toteElevator = new ToteElevator();
        bident = new Bident();
        map = new Map();
        lights = new Lights();
        underGlow = new UnderGlow();
        SmartDashboard.putNumber("Yaw", Robot.chassis.adjustedYaw());
        //SmartDashboard.putNumber("GyroYaw", RobotMap.chassisGyro.updateTable(); );
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();
        bident.setRange(-9347, -18);
        //bident.setInches(55, 0);
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
        joystickDrive = new ManualDrive();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        Camera.init();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        Camera.update();                            //The update method gets new coordinate values from RoboRealm.
        System.out.println("Getting Values");		//getX and getY return the doubles x (COG_X) and y (COG_Y)
        System.out.println("X = " + Camera.getX()); //from the Camera subsystem.
        System.out.println("Y = " + Camera.getY()); //RoboRealm draws a bounding box around yellow objects, 
        System.out.println("Got Values");           //and records the coordinates of the center of gravity of said box 
		 											//in the variables COG_X and COG_Y.
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	if (autonomousCommand != null) autonomousCommand.cancel();
    	joystickDrive.start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putData("Robot Front",RobotMap.chassisGyro );
        SmartDashboard.putData("PDP", RobotMap.powerPanel);
        SmartDashboard.putData("Accelerometer",RobotMap.onboardAccelerometer);
        SmartDashboard.putData("Compressor", RobotMap.compressor);
        System.out.println(Robot.bident.get());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        Camera.update();
        System.out.println("X = " + Camera.getX());
        System.out.println("Y = " + Camera.getY());
        //System.out.print("range finder: ");
        //System.out.println(bident.getDistanceBumper());
        
        //FIXME: Using logger causes robots don't quit
        //logger.info("whatever");
        //logger.debug("anything");
        //logger.warning("something");
        //logger.status("a thing");
    }
    
}
