// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2811.RecycleRush;

import org.usfirst.frc2811.RecycleRush.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public Joystick joystick;
	public JoystickButton button1;
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button7;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(0);
        
        button1 = new JoystickButton(joystick, 1);
        button1.whenPressed(new BidentHoming ());
       
        button2 = new JoystickButton(joystick, 4);
        button2.whileHeld(new BidentUpManual());
        button2.whenReleased(new BidentStop());
        
        button3=new JoystickButton(joystick,2);
        button3.whileHeld(new BidentDownManual());
        button3.whenReleased(new BidentStop());

        button4=new JoystickButton(joystick,3);
        button4.whenPressed(new BidentStop());

        button5=new JoystickButton(joystick,6);
        button5.whileHeld(new BidentSet());
        
        button7=new JoystickButton(joystick,7);
        button7.whileHeld(new ToteDownManual());

        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());

        SmartDashboard.putData("ManualDrive", new ManualDrive());

        SmartDashboard.putData("AutoDrive", new AutoDrive());

        SmartDashboard.putData("Abort", new Abort());

        SmartDashboard.putData("Wait", new Wait());

        SmartDashboard.putData("Compress", new Compress());

        SmartDashboard.putData("ToteGrab", new ToteGrab());

        SmartDashboard.putData("ToteLift", new ToteLift());

        SmartDashboard.putData("ToteSet", new ToteSet());

        SmartDashboard.putData("ToteLineUp", new ToteLineUp());

        SmartDashboard.putData("ToteStack", new ToteStack());

        SmartDashboard.putData("BidentOpen", new BidentOpen());

        SmartDashboard.putData("BidentClose", new BidentClose());

        SmartDashboard.putData("BidentUp", new BidentUpManual());

        SmartDashboard.putData("BidentDown", new BidentDownManual());

        SmartDashboard.putData("BidentSet", new BidentSet());

        SmartDashboard.putData("BidentLineUp", new BidentLineUp());
        
        SmartDashboard.putData("Homing System", new BidentHoming());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

